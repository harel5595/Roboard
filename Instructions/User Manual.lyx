#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{culmus}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 3cm
\bottommargin 3cm
\headheight 2cm
\headsep 2cm
\footskip 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\lang english
Roboard User Manual
\end_layout

\begin_layout Standard

\lang english
Welcome to Roboard, the robotic board-writing hand.
 Setting up is fairly easy, and drawing is done in the following steps:
\end_layout

\begin_layout Standard

\lang english
The default option for running the program is the 
\begin_inset Quotes eld
\end_inset

roboard_script.py
\begin_inset Quotes erd
\end_inset

 file.
 
\end_layout

\begin_layout Section

\lang english
Installation
\end_layout

\begin_layout Standard

\lang english
First, make sure you have 
\begin_inset CommandInset href
LatexCommand href
name "Kinova"
target "https://drive.google.com/file/d/1UEQAow0XLcVcPCeQfHK9ERBihOCclkJ9/view"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Python 3"
target "https://www.python.org/downloads/"
literal "false"

\end_inset

.
\begin_inset Newline newline
\end_inset

Install our library: 
\begin_inset CommandInset href
LatexCommand href
name "Link to Github"
target "https://github.com/harel5595/Roboard"
literal "false"

\end_inset


\begin_inset Newline newline
\end_inset

If you have all the files from the github, the project should be good to
 go, you can now run Roboard_script.py.
\begin_inset Newline newline
\end_inset

Try doing something simple, like :
\begin_inset Newline newline
\end_inset

$ python roboard_script.py -s 
\begin_inset Quotes eld
\end_inset

Hello World!
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section

\lang english
Roboard_script.py
\end_layout

\begin_layout Standard

\lang english
This is the regular way of interacting with our program.
 There are dozens of useful flags, but the general use is upon inputting
 a string of legal charachters, the robotic arm prints them on the board.
 The man page entry:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
NAME Roboard SYNOPSIS Roboard [-s|-f|-c write_string] [-lc|-sc callibration_path
] [-v|-vv|-VV] [OPTIONS]...
 DESCRIPTION This function incapsulates the functionality of the Roboard
 (TM) module.
 given a write_string, it sends the appropriate commands to the robot, and
 writes that text the board.
 There are several callibration options and text-editing options.
 OPTIONS -s write_string the string you wish to write on the board -f write_stri
ng the path to a text file containg the string you wish to write on the
 board -c compilation_path the path to a complied text file of robot command
 lines --save-compliation compilation_path use this flag if you want to
 save the compilation product to a file at compilation_path.
 the intended use is without the -c option -lc callibration_path if you
 have a file containing a previous relevant callibration (for example, after
 using the -s option) you can skip the callibration phase and just use the
 measurments from that file.
 -sc callibration_path if you wish to store the callibration measurements
 for later use, use this flag with the desired path if none of lc|sc are
 used, the callibration phase will not be skipped, but the measurements
 will not be saved anywhere.
 -v|-vv|-VV verbose options --font-size h set maximal height of letters
 to h (in centimeters) --line-length-limit w set the maximum length of a
 line to w (in centimeters) if a word has length greater than w, an exception
 wil be thrown --letter-spacing spacing set the spacing between letters
 to be spacing (as a percentage of the height of the letters) --line-spacing
 spacing set the line spacing to be spacing (as a percentage of the height
 of the letters) --line-amount-limit L set the maximum amount of lines to
 L.
 this doesn't actually alter the output, but if your text doesn't comply
 with this restriction, an exception will be thrown and the robot will not
 perform any commands.
 --first-line-X x sets the X coordinates of the bottom left point of the
 first letter in the first line to x.
 --first-line-Y y sets the Y coordinates of the bottom left point of the
 first letter in the first line to y.
 both first-line-X and first-line-Y use coordinates in the plane detirmined
 at callibration.
 the unit length is 1 centimeter and the orgin is at the bottom left measurment.
 if the callibraion is done propely the x axis is parallel to the ground
 and point to the right, and the y axis is perpendicular to it and points
 upwards.
 EXAMPLES Roboard -s "HELLO WORLD!" Roboard -s "Hi, my name is Roaboard.
 I can write anything on the board :)" -sc "roboard_callibration.txt" Roboard
 -f "write_text.txt" -lc "roboard_callibration.txt" --font-size 10 --line-length-l
imit 30 '
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
textCompiler.py
\end_layout

\begin_layout Standard

\lang english
First, we have to compile some text into instructions using 
\begin_inset Quotes eld
\end_inset

textCompiler.py
\begin_inset Quotes erd
\end_inset

, and then run
\begin_inset Quotes erd
\end_inset

Roboard.cpp
\begin_inset Quotes erd
\end_inset

, and give it the complied text file.
\begin_inset Newline newline
\end_inset

Converts between strings of text to basic robot line instructions.
 This is similar to how code is compiled to binary.
 These instructions however, are also human readable.
 The lines are stored in a format similar to SVG paths, and the compiler
 is technically only here for comfort, we compiled a lot of instructions
 by hand.
 We also created our own font, so that we could convert characters into
 their own sets of lines.
 For a detailed description of these instruction files, check the programmers
 guide.
\end_layout

\end_body
\end_document
